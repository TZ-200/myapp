type AggregateComment {
  count: Int!
}

type AggregateThread {
  count: Int!
}

type AggregateUpvote {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVtuber {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  thread: Thread!
  upvotes(where: UpvoteWhereInput, orderBy: UpvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Upvote!]
  reply: Comment
  depth: Int!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  thread: ThreadCreateOneWithoutCommentsInput!
  upvotes: UpvoteCreateManyWithoutCommentInput
  reply: CommentCreateOneInput
  depth: Int!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutThreadInput {
  create: [CommentCreateWithoutThreadInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutUpvotesInput {
  create: CommentCreateWithoutUpvotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutAuthorInput {
  text: String!
  thread: ThreadCreateOneWithoutCommentsInput!
  upvotes: UpvoteCreateManyWithoutCommentInput
  reply: CommentCreateOneInput
  depth: Int!
}

input CommentCreateWithoutThreadInput {
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  upvotes: UpvoteCreateManyWithoutCommentInput
  reply: CommentCreateOneInput
  depth: Int!
}

input CommentCreateWithoutUpvotesInput {
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  thread: ThreadCreateOneWithoutCommentsInput!
  reply: CommentCreateOneInput
  depth: Int!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  depth_ASC
  depth_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  depth: Int!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  upvotes: UpvoteUpdateManyWithoutCommentInput
  reply: CommentUpdateOneInput
  depth: Int
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  upvotes: UpvoteUpdateManyWithoutCommentInput
  reply: CommentUpdateOneInput
  depth: Int
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutThreadInput {
  create: [CommentCreateWithoutThreadInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutThreadInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutThreadInput!]
}

input CommentUpdateOneInput {
  create: CommentCreateInput
  update: CommentUpdateDataInput
  upsert: CommentUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateOneRequiredWithoutUpvotesInput {
  create: CommentCreateWithoutUpvotesInput
  update: CommentUpdateWithoutUpvotesDataInput
  upsert: CommentUpsertWithoutUpvotesInput
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  upvotes: UpvoteUpdateManyWithoutCommentInput
  reply: CommentUpdateOneInput
  depth: Int
}

input CommentUpdateWithoutThreadDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  upvotes: UpvoteUpdateManyWithoutCommentInput
  reply: CommentUpdateOneInput
  depth: Int
}

input CommentUpdateWithoutUpvotesDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  reply: CommentUpdateOneInput
  depth: Int
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutThreadInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutThreadDataInput!
}

input CommentUpsertNestedInput {
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentUpsertWithoutUpvotesInput {
  update: CommentUpdateWithoutUpvotesDataInput!
  create: CommentCreateWithoutUpvotesInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutThreadInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutThreadDataInput!
  create: CommentCreateWithoutThreadInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: UserWhereInput
  thread: ThreadWhereInput
  upvotes_every: UpvoteWhereInput
  upvotes_some: UpvoteWhereInput
  upvotes_none: UpvoteWhereInput
  reply: CommentWhereInput
  depth: Int
  depth_not: Int
  depth_in: [Int!]
  depth_not_in: [Int!]
  depth_lt: Int
  depth_lte: Int
  depth_gt: Int
  depth_gte: Int
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createThread(data: ThreadCreateInput!): Thread!
  updateThread(data: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread
  updateManyThreads(data: ThreadUpdateInput!, where: ThreadWhereInput): BatchPayload!
  upsertThread(where: ThreadWhereUniqueInput!, create: ThreadCreateInput!, update: ThreadUpdateInput!): Thread!
  deleteThread(where: ThreadWhereUniqueInput!): Thread
  deleteManyThreads(where: ThreadWhereInput): BatchPayload!
  createUpvote(data: UpvoteCreateInput!): Upvote!
  updateUpvote(data: UpvoteUpdateInput!, where: UpvoteWhereUniqueInput!): Upvote
  updateManyUpvotes(data: UpvoteUpdateInput!, where: UpvoteWhereInput): BatchPayload!
  upsertUpvote(where: UpvoteWhereUniqueInput!, create: UpvoteCreateInput!, update: UpvoteUpdateInput!): Upvote!
  deleteUpvote(where: UpvoteWhereUniqueInput!): Upvote
  deleteManyUpvotes(where: UpvoteWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVtuber(data: VtuberCreateInput!): Vtuber!
  updateVtuber(data: VtuberUpdateInput!, where: VtuberWhereUniqueInput!): Vtuber
  updateManyVtubers(data: VtuberUpdateInput!, where: VtuberWhereInput): BatchPayload!
  upsertVtuber(where: VtuberWhereUniqueInput!, create: VtuberCreateInput!, update: VtuberUpdateInput!): Vtuber!
  deleteVtuber(where: VtuberWhereUniqueInput!): Vtuber
  deleteManyVtubers(where: VtuberWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  COMMENTUPDATE
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  thread(where: ThreadWhereUniqueInput!): Thread
  threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thread]!
  threadsConnection(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThreadConnection!
  upvote(where: UpvoteWhereUniqueInput!): Upvote
  upvotes(where: UpvoteWhereInput, orderBy: UpvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Upvote]!
  upvotesConnection(where: UpvoteWhereInput, orderBy: UpvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UpvoteConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vtuber(where: VtuberWhereUniqueInput!): Vtuber
  vtubers(where: VtuberWhereInput, orderBy: VtuberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vtuber]!
  vtubersConnection(where: VtuberWhereInput, orderBy: VtuberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VtuberConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  thread(where: ThreadSubscriptionWhereInput): ThreadSubscriptionPayload
  upvote(where: UpvoteSubscriptionWhereInput): UpvoteSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vtuber(where: VtuberSubscriptionWhereInput): VtuberSubscriptionPayload
}

type Thread {
  id: ID!
  title: String!
  text: String!
  image: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  vtuber: Vtuber!
}

type ThreadConnection {
  pageInfo: PageInfo!
  edges: [ThreadEdge]!
  aggregate: AggregateThread!
}

input ThreadCreateInput {
  title: String!
  text: String!
  image: String
  author: UserCreateOneWithoutThreadsInput!
  comments: CommentCreateManyWithoutThreadInput
  vtuber: VtuberCreateOneWithoutThreadsInput!
}

input ThreadCreateManyWithoutAuthorInput {
  create: [ThreadCreateWithoutAuthorInput!]
  connect: [ThreadWhereUniqueInput!]
}

input ThreadCreateManyWithoutVtuberInput {
  create: [ThreadCreateWithoutVtuberInput!]
  connect: [ThreadWhereUniqueInput!]
}

input ThreadCreateOneWithoutCommentsInput {
  create: ThreadCreateWithoutCommentsInput
  connect: ThreadWhereUniqueInput
}

input ThreadCreateWithoutAuthorInput {
  title: String!
  text: String!
  image: String
  comments: CommentCreateManyWithoutThreadInput
  vtuber: VtuberCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutCommentsInput {
  title: String!
  text: String!
  image: String
  author: UserCreateOneWithoutThreadsInput!
  vtuber: VtuberCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutVtuberInput {
  title: String!
  text: String!
  image: String
  author: UserCreateOneWithoutThreadsInput!
  comments: CommentCreateManyWithoutThreadInput
}

type ThreadEdge {
  node: Thread!
  cursor: String!
}

enum ThreadOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  image_ASC
  image_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ThreadPreviousValues {
  id: ID!
  title: String!
  text: String!
  image: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ThreadSubscriptionPayload {
  mutation: MutationType!
  node: Thread
  updatedFields: [String!]
  previousValues: ThreadPreviousValues
}

input ThreadSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThreadWhereInput
  AND: [ThreadSubscriptionWhereInput!]
  OR: [ThreadSubscriptionWhereInput!]
  NOT: [ThreadSubscriptionWhereInput!]
}

input ThreadUpdateInput {
  title: String
  text: String
  image: String
  author: UserUpdateOneRequiredWithoutThreadsInput
  comments: CommentUpdateManyWithoutThreadInput
  vtuber: VtuberUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateManyWithoutAuthorInput {
  create: [ThreadCreateWithoutAuthorInput!]
  delete: [ThreadWhereUniqueInput!]
  connect: [ThreadWhereUniqueInput!]
  disconnect: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ThreadUpdateManyWithoutVtuberInput {
  create: [ThreadCreateWithoutVtuberInput!]
  delete: [ThreadWhereUniqueInput!]
  connect: [ThreadWhereUniqueInput!]
  disconnect: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutVtuberInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutVtuberInput!]
}

input ThreadUpdateOneRequiredWithoutCommentsInput {
  create: ThreadCreateWithoutCommentsInput
  update: ThreadUpdateWithoutCommentsDataInput
  upsert: ThreadUpsertWithoutCommentsInput
  connect: ThreadWhereUniqueInput
}

input ThreadUpdateWithoutAuthorDataInput {
  title: String
  text: String
  image: String
  comments: CommentUpdateManyWithoutThreadInput
  vtuber: VtuberUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateWithoutCommentsDataInput {
  title: String
  text: String
  image: String
  author: UserUpdateOneRequiredWithoutThreadsInput
  vtuber: VtuberUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateWithoutVtuberDataInput {
  title: String
  text: String
  image: String
  author: UserUpdateOneRequiredWithoutThreadsInput
  comments: CommentUpdateManyWithoutThreadInput
}

input ThreadUpdateWithWhereUniqueWithoutAuthorInput {
  where: ThreadWhereUniqueInput!
  data: ThreadUpdateWithoutAuthorDataInput!
}

input ThreadUpdateWithWhereUniqueWithoutVtuberInput {
  where: ThreadWhereUniqueInput!
  data: ThreadUpdateWithoutVtuberDataInput!
}

input ThreadUpsertWithoutCommentsInput {
  update: ThreadUpdateWithoutCommentsDataInput!
  create: ThreadCreateWithoutCommentsInput!
}

input ThreadUpsertWithWhereUniqueWithoutAuthorInput {
  where: ThreadWhereUniqueInput!
  update: ThreadUpdateWithoutAuthorDataInput!
  create: ThreadCreateWithoutAuthorInput!
}

input ThreadUpsertWithWhereUniqueWithoutVtuberInput {
  where: ThreadWhereUniqueInput!
  update: ThreadUpdateWithoutVtuberDataInput!
  create: ThreadCreateWithoutVtuberInput!
}

input ThreadWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  vtuber: VtuberWhereInput
  AND: [ThreadWhereInput!]
  OR: [ThreadWhereInput!]
  NOT: [ThreadWhereInput!]
}

input ThreadWhereUniqueInput {
  id: ID
}

type Upvote {
  id: ID!
  author: User!
  Comment: Comment!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UpvoteConnection {
  pageInfo: PageInfo!
  edges: [UpvoteEdge]!
  aggregate: AggregateUpvote!
}

input UpvoteCreateInput {
  author: UserCreateOneWithoutUpvotesInput!
  Comment: CommentCreateOneWithoutUpvotesInput!
}

input UpvoteCreateManyWithoutAuthorInput {
  create: [UpvoteCreateWithoutAuthorInput!]
  connect: [UpvoteWhereUniqueInput!]
}

input UpvoteCreateManyWithoutCommentInput {
  create: [UpvoteCreateWithoutCommentInput!]
  connect: [UpvoteWhereUniqueInput!]
}

input UpvoteCreateWithoutAuthorInput {
  Comment: CommentCreateOneWithoutUpvotesInput!
}

input UpvoteCreateWithoutCommentInput {
  author: UserCreateOneWithoutUpvotesInput!
}

type UpvoteEdge {
  node: Upvote!
  cursor: String!
}

enum UpvoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UpvotePreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UpvoteSubscriptionPayload {
  mutation: MutationType!
  node: Upvote
  updatedFields: [String!]
  previousValues: UpvotePreviousValues
}

input UpvoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UpvoteWhereInput
  AND: [UpvoteSubscriptionWhereInput!]
  OR: [UpvoteSubscriptionWhereInput!]
  NOT: [UpvoteSubscriptionWhereInput!]
}

input UpvoteUpdateInput {
  author: UserUpdateOneRequiredWithoutUpvotesInput
  Comment: CommentUpdateOneRequiredWithoutUpvotesInput
}

input UpvoteUpdateManyWithoutAuthorInput {
  create: [UpvoteCreateWithoutAuthorInput!]
  delete: [UpvoteWhereUniqueInput!]
  connect: [UpvoteWhereUniqueInput!]
  disconnect: [UpvoteWhereUniqueInput!]
  update: [UpvoteUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [UpvoteUpsertWithWhereUniqueWithoutAuthorInput!]
}

input UpvoteUpdateManyWithoutCommentInput {
  create: [UpvoteCreateWithoutCommentInput!]
  delete: [UpvoteWhereUniqueInput!]
  connect: [UpvoteWhereUniqueInput!]
  disconnect: [UpvoteWhereUniqueInput!]
  update: [UpvoteUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [UpvoteUpsertWithWhereUniqueWithoutCommentInput!]
}

input UpvoteUpdateWithoutAuthorDataInput {
  Comment: CommentUpdateOneRequiredWithoutUpvotesInput
}

input UpvoteUpdateWithoutCommentDataInput {
  author: UserUpdateOneRequiredWithoutUpvotesInput
}

input UpvoteUpdateWithWhereUniqueWithoutAuthorInput {
  where: UpvoteWhereUniqueInput!
  data: UpvoteUpdateWithoutAuthorDataInput!
}

input UpvoteUpdateWithWhereUniqueWithoutCommentInput {
  where: UpvoteWhereUniqueInput!
  data: UpvoteUpdateWithoutCommentDataInput!
}

input UpvoteUpsertWithWhereUniqueWithoutAuthorInput {
  where: UpvoteWhereUniqueInput!
  update: UpvoteUpdateWithoutAuthorDataInput!
  create: UpvoteCreateWithoutAuthorInput!
}

input UpvoteUpsertWithWhereUniqueWithoutCommentInput {
  where: UpvoteWhereUniqueInput!
  update: UpvoteUpdateWithoutCommentDataInput!
  create: UpvoteCreateWithoutCommentInput!
}

input UpvoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: UserWhereInput
  Comment: CommentWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UpvoteWhereInput!]
  OR: [UpvoteWhereInput!]
  NOT: [UpvoteWhereInput!]
}

input UpvoteWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  description: String
  image: String
  Comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  Threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thread!]
  Upvotes(where: UpvoteWhereInput, orderBy: UpvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Upvote!]
  permission: Permission!
  updatedAt: DateTime!
  createdAt: DateTime!
  follows(where: VtuberWhereInput, orderBy: VtuberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vtuber!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  description: String
  image: String
  Comments: CommentCreateManyWithoutAuthorInput
  Threads: ThreadCreateManyWithoutAuthorInput
  Upvotes: UpvoteCreateManyWithoutAuthorInput
  permission: Permission!
  follows: VtuberCreateManyWithoutFollowersInput
}

input UserCreateManyWithoutFollowsInput {
  create: [UserCreateWithoutFollowsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUpvotesInput {
  create: UserCreateWithoutUpvotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  name: String!
  email: String!
  password: String!
  description: String
  image: String
  Threads: ThreadCreateManyWithoutAuthorInput
  Upvotes: UpvoteCreateManyWithoutAuthorInput
  permission: Permission!
  follows: VtuberCreateManyWithoutFollowersInput
}

input UserCreateWithoutFollowsInput {
  name: String!
  email: String!
  password: String!
  description: String
  image: String
  Comments: CommentCreateManyWithoutAuthorInput
  Threads: ThreadCreateManyWithoutAuthorInput
  Upvotes: UpvoteCreateManyWithoutAuthorInput
  permission: Permission!
}

input UserCreateWithoutThreadsInput {
  name: String!
  email: String!
  password: String!
  description: String
  image: String
  Comments: CommentCreateManyWithoutAuthorInput
  Upvotes: UpvoteCreateManyWithoutAuthorInput
  permission: Permission!
  follows: VtuberCreateManyWithoutFollowersInput
}

input UserCreateWithoutUpvotesInput {
  name: String!
  email: String!
  password: String!
  description: String
  image: String
  Comments: CommentCreateManyWithoutAuthorInput
  Threads: ThreadCreateManyWithoutAuthorInput
  permission: Permission!
  follows: VtuberCreateManyWithoutFollowersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  permission_ASC
  permission_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  description: String
  image: String
  permission: Permission!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  description: String
  image: String
  Comments: CommentUpdateManyWithoutAuthorInput
  Threads: ThreadUpdateManyWithoutAuthorInput
  Upvotes: UpvoteUpdateManyWithoutAuthorInput
  permission: Permission
  follows: VtuberUpdateManyWithoutFollowersInput
}

input UserUpdateManyWithoutFollowsInput {
  create: [UserCreateWithoutFollowsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowsInput!]
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput
  update: UserUpdateWithoutThreadsDataInput
  upsert: UserUpsertWithoutThreadsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutUpvotesInput {
  create: UserCreateWithoutUpvotesInput
  update: UserUpdateWithoutUpvotesDataInput
  upsert: UserUpsertWithoutUpvotesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  password: String
  description: String
  image: String
  Threads: ThreadUpdateManyWithoutAuthorInput
  Upvotes: UpvoteUpdateManyWithoutAuthorInput
  permission: Permission
  follows: VtuberUpdateManyWithoutFollowersInput
}

input UserUpdateWithoutFollowsDataInput {
  name: String
  email: String
  password: String
  description: String
  image: String
  Comments: CommentUpdateManyWithoutAuthorInput
  Threads: ThreadUpdateManyWithoutAuthorInput
  Upvotes: UpvoteUpdateManyWithoutAuthorInput
  permission: Permission
}

input UserUpdateWithoutThreadsDataInput {
  name: String
  email: String
  password: String
  description: String
  image: String
  Comments: CommentUpdateManyWithoutAuthorInput
  Upvotes: UpvoteUpdateManyWithoutAuthorInput
  permission: Permission
  follows: VtuberUpdateManyWithoutFollowersInput
}

input UserUpdateWithoutUpvotesDataInput {
  name: String
  email: String
  password: String
  description: String
  image: String
  Comments: CommentUpdateManyWithoutAuthorInput
  Threads: ThreadUpdateManyWithoutAuthorInput
  permission: Permission
  follows: VtuberUpdateManyWithoutFollowersInput
}

input UserUpdateWithWhereUniqueWithoutFollowsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowsDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutThreadsInput {
  update: UserUpdateWithoutThreadsDataInput!
  create: UserCreateWithoutThreadsInput!
}

input UserUpsertWithoutUpvotesInput {
  update: UserUpdateWithoutUpvotesDataInput!
  create: UserCreateWithoutUpvotesInput!
}

input UserUpsertWithWhereUniqueWithoutFollowsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowsDataInput!
  create: UserCreateWithoutFollowsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  Comments_every: CommentWhereInput
  Comments_some: CommentWhereInput
  Comments_none: CommentWhereInput
  Threads_every: ThreadWhereInput
  Threads_some: ThreadWhereInput
  Threads_none: ThreadWhereInput
  Upvotes_every: UpvoteWhereInput
  Upvotes_some: UpvoteWhereInput
  Upvotes_none: UpvoteWhereInput
  permission: Permission
  permission_not: Permission
  permission_in: [Permission!]
  permission_not_in: [Permission!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  follows_every: VtuberWhereInput
  follows_some: VtuberWhereInput
  follows_none: VtuberWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vtuber {
  id: ID!
  name: String!
  image: String!
  channelId: String!
  threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thread!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VtuberConnection {
  pageInfo: PageInfo!
  edges: [VtuberEdge]!
  aggregate: AggregateVtuber!
}

input VtuberCreateInput {
  name: String!
  image: String!
  channelId: String!
  threads: ThreadCreateManyWithoutVtuberInput
  followers: UserCreateManyWithoutFollowsInput
}

input VtuberCreateManyWithoutFollowersInput {
  create: [VtuberCreateWithoutFollowersInput!]
  connect: [VtuberWhereUniqueInput!]
}

input VtuberCreateOneWithoutThreadsInput {
  create: VtuberCreateWithoutThreadsInput
  connect: VtuberWhereUniqueInput
}

input VtuberCreateWithoutFollowersInput {
  name: String!
  image: String!
  channelId: String!
  threads: ThreadCreateManyWithoutVtuberInput
}

input VtuberCreateWithoutThreadsInput {
  name: String!
  image: String!
  channelId: String!
  followers: UserCreateManyWithoutFollowsInput
}

type VtuberEdge {
  node: Vtuber!
  cursor: String!
}

enum VtuberOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  channelId_ASC
  channelId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VtuberPreviousValues {
  id: ID!
  name: String!
  image: String!
  channelId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VtuberSubscriptionPayload {
  mutation: MutationType!
  node: Vtuber
  updatedFields: [String!]
  previousValues: VtuberPreviousValues
}

input VtuberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VtuberWhereInput
  AND: [VtuberSubscriptionWhereInput!]
  OR: [VtuberSubscriptionWhereInput!]
  NOT: [VtuberSubscriptionWhereInput!]
}

input VtuberUpdateInput {
  name: String
  image: String
  channelId: String
  threads: ThreadUpdateManyWithoutVtuberInput
  followers: UserUpdateManyWithoutFollowsInput
}

input VtuberUpdateManyWithoutFollowersInput {
  create: [VtuberCreateWithoutFollowersInput!]
  delete: [VtuberWhereUniqueInput!]
  connect: [VtuberWhereUniqueInput!]
  disconnect: [VtuberWhereUniqueInput!]
  update: [VtuberUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [VtuberUpsertWithWhereUniqueWithoutFollowersInput!]
}

input VtuberUpdateOneRequiredWithoutThreadsInput {
  create: VtuberCreateWithoutThreadsInput
  update: VtuberUpdateWithoutThreadsDataInput
  upsert: VtuberUpsertWithoutThreadsInput
  connect: VtuberWhereUniqueInput
}

input VtuberUpdateWithoutFollowersDataInput {
  name: String
  image: String
  channelId: String
  threads: ThreadUpdateManyWithoutVtuberInput
}

input VtuberUpdateWithoutThreadsDataInput {
  name: String
  image: String
  channelId: String
  followers: UserUpdateManyWithoutFollowsInput
}

input VtuberUpdateWithWhereUniqueWithoutFollowersInput {
  where: VtuberWhereUniqueInput!
  data: VtuberUpdateWithoutFollowersDataInput!
}

input VtuberUpsertWithoutThreadsInput {
  update: VtuberUpdateWithoutThreadsDataInput!
  create: VtuberCreateWithoutThreadsInput!
}

input VtuberUpsertWithWhereUniqueWithoutFollowersInput {
  where: VtuberWhereUniqueInput!
  update: VtuberUpdateWithoutFollowersDataInput!
  create: VtuberCreateWithoutFollowersInput!
}

input VtuberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  channelId: String
  channelId_not: String
  channelId_in: [String!]
  channelId_not_in: [String!]
  channelId_lt: String
  channelId_lte: String
  channelId_gt: String
  channelId_gte: String
  channelId_contains: String
  channelId_not_contains: String
  channelId_starts_with: String
  channelId_not_starts_with: String
  channelId_ends_with: String
  channelId_not_ends_with: String
  threads_every: ThreadWhereInput
  threads_some: ThreadWhereInput
  threads_none: ThreadWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VtuberWhereInput!]
  OR: [VtuberWhereInput!]
  NOT: [VtuberWhereInput!]
}

input VtuberWhereUniqueInput {
  id: ID
  channelId: String
}
