# import * from './generated/prisma.graphql'

type Mutation {
    # createItem(title: String, description: String, price: Int, image: String, largeImage: String): Item!
    # updateItem(id: ID!, title: String, description: String, price: Int): Item!
    # deleteItem(id: ID!): Item!
    signup(email: String!, password: String!, name: String!): User!
    signin(email: String!, password: String!): User!
    signout: SuccessMessage
    checkThreadPermission(id: ID!): SuccessMessage
    # requestReset(email: String!): SuccessMessage
    # resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
    # updatePermissions(permissions: [Permission], userId: ID!): User
    # addToCart(id: ID!): CartItem
    # removeFromCart(id: ID!): CartItem
    # createOrder(token: String!): Order!
    createThread(title: String!, text: String!, image: String, vtuber: ID!): Thread!
    updateThread(id: ID!, title: String!, text: String!, image: String): Thread!
    deleteThread(id: ID!): Thread!
    createComment(text: String!, thread: ID!, reply: ID): Comment!
    deleteComment(id: ID!): Comment!
    createUpvote(authorId: ID!, commentId: ID!): Upvote!
    deleteUpvote(id: ID!): Upvote!
    updateUser(name: String, description: String, image: String): User!
    createVtuber(name: String!, channelId: String!, image: String!): Vtuber!
    createFollow(vtuber: ID!): User!
    deleteFollow(vtuber: ID!): User!
}

type Query {
    # posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, first: Int): [Post]!
    # item(where: ItemWhereUniqueInput!): Item
    # itemsConnection(where: ItemWhereInput): ItemConnection!
    me: User  # userIdはjwtから取得するのでargumentはいらない
    users: [User]!
    # order(id: ID!): Order
    threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, first: Int): [Thread]!
    thread(where: ThreadWhereUniqueInput!): Thread
    # followingThreads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, first: Int): [Thread]!
    comments(where: CommentWhereInput): [Comment]!
    threadsConnection(where: ThreadWhereInput): ThreadConnection!
    vtubersConnection(where: VtuberWhereInput): VtuberConnection!
    vtubers(where: VtuberWhereInput, orderBy: VtuberOrderByInput, skip: Int, first: Int): [Vtuber]!
    vtuber(where: VtuberWhereUniqueInput!): Vtuber!
}

# Client側に送信してはならない情報（password/resetTokenを削除（Redefine））
# type User {
#     id: ID!
#     name: String!
#     email: String!
#     permission: Permission
# }

type SuccessMessage {
    message: String
}
